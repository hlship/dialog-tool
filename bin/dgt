#!/usr/bin/env joker

;; dgt - Dialog Tool

(ns-sources
 {"net.lewisship.multi" {:url "https://raw.githubusercontent.com/hlship/multi/v1.4.0/src/net/lewisship/multi.joke"}})

(ns dgt
  "Build, run, and test interactive fiction projects written in Dialog."
  (:require
   [joker.os :as os]
   [joker.string :as str]
   [joker.filepath :as f]
   [joker.time :as t]
   [joker.strconv :refer [atoi]]
   [joker.crypto :as crypto]
   [joker.hex :as hex]
   [joker.http :as http]
   [joker.better-cond :as b]
   [net.lewisship.multi :as multi :refer [defcommand]]))

(def *debug (atom false))

(def debug-opt
  ["-d" "--debug" "Output shell commands before executing them"
   :update-fn (fn [_]  
                (reset! *debug true)
                true)])

(def failures-path "out/failures.edn")

(def csi "\u001b[") 
(def reset-font (str csi "m")) 
(def red-font (str csi "31m"))
(def green-font (str csi "32m"))
(def cyan-font (str csi "36m"))

(def default-project
  {:default-output :web
   :name (f/base (joker.os/cwd))
   :debug-sources ["/usr/local/share/dialog-if/stddebug.dg"]
   :library-sources ["/usr/local/share/dialog-if/stdlib.dg"]})

;; Utilities
(defn fail
  [msg]
  (println-err msg)
  (os/exit -1))

(defn check-result
  [label result]
  (when-not (:success result)
    (fail (str label " failed: " (:err-msg result) \n (:err result))))
  result)

(defn sh
  [name & arguments]
  (when @*debug
    (println (str cyan-font name " " (str/join " " arguments) reset-font)))

  (apply os/sh name arguments))

(defn exec
  [name opts]
  (when @*debug
    (println (str cyan-font
                  name
                  " "
                  (str/join " " (:args opts))
                  reset-font)))

  (os/exec name opts))

(defn mkdirs
  "Recursively create a directory, if it doesn't already exist."
  [path]
  (check-result "mkdirs"
                (sh "mkdir" "-p" path)))

(defn rm
  [path]  
  (when (os/exists? path)
    (check-result "Remove" 
                  (sh "rm" path))))

(defn cache-url
  "Caches a file identified by a URL, returning the path to the cached file."
  [url]
  (b/cond
    :let [file-name (f/base url)
          sha (-> url crypto/sha1 hex/encode-string)
          cache-dir (f/join ".cache" sha)
          cache-path (f/join cache-dir file-name)]
    
    (os/exists? cache-path)
    cache-path
    
    :let [response (http/send {:url url})
          {:keys [status body]} response]
    
    (not= 200 status)
    (fail (format "Download of %s failed with status %d" url status))
    
    :else
    (do
      (mkdirs cache-dir)
      (spit cache-path body)
      cache-path)))

(defn expand-github 
  [lib]
  (let [{:keys [github version path]} lib]
    (when (or (nil? version)
              (nil? path))
      (throw (ex-info "Version and path are required"
                      {:lib lib})))
    (when (#{"master" "main"} version)
      (throw (ex-info "Version may not be master"
                      {:lib lib})))
    
    (cache-url (str "https://raw.githubusercontent.com/"
                    github  ;; eg "hlship/threaded-conversation"
                    "/"
                    version ;; eg "v0.1"
                    "/"
                    path)))) ;; eg "lib/threaded-conversation.dg"

  (defn expand-lib
  [lib]
  (b/cond
    (string? lib)
    lib
    
    (not (map? lib))
    (throw (ex-info "Library must be string or map"
                    {:lib lib}))
    
    :let [{:keys [github]} lib]
    
    (some? github)
    (expand-github lib)
    
    :else
    (throw (ex-info "Unknown library map"
                    {:lib lib}))))

;; Commands library

;; DGT Commands

(defn glob-lib
  "If the library is a string, glob it into a seq of matches.
   Otherwise, it is a map, and wrap it in a vector."
  [lib]
  (if (string? lib)
    (f/glob lib)
    [lib]))

(defn read-project-file
  []
  (when-not (os/exists? "dialog.edn")
    (fail "No dialog.edn file in current directory."))
  
  (let [project (-> "dialog.edn"
                       slurp
                       read-string)
        merged (merge default-project project)]
    (reduce (fn [m k]
              (update m k #(mapcat glob-lib %)))
            merged
            [:story-sources :debug-sources :library-sources])))

;; Commands

(defn extract-sources
  [project for-release?]
  (let [{:keys [story-sources
                debug-sources
                library-sources]} project
        sources (reduce into []
                        [story-sources
                         (when-not for-release?
                           debug-sources)
                         library-sources])]
    (mapv expand-lib sources)))


(defmulti run-build
  (fn [format project sources output-dir options] format))

(defn  make-args
  [format project options output-path]
  (let [{:keys [verbose testing extra-args resource-dir]
         :or {resource-dir "resources"}} options
        {:keys [build-args]} project]
    (cond-> ["--format" (name format)
             "--output" output-path]

      verbose (conj "--verbose")

      (and resource-dir
           (os/exists? resource-dir))
      (conj "--resources" resource-dir)

      (not testing) (conj "--strip")

      extra-args (into extra-args)

      build-args (into build-args))))

(defn invoke-dialogc
  [format project sources output-dir options]
  (let [ext (if (= format :aa) "aastory" (name format))
        output-path (str output-dir "/" (:name project) "." ext) 
        args (into (make-args format project options output-path)
                   sources)]
    (check-result "Compile"
                  (exec "dialogc"
                        {:stdout *out*
                         :stderr *err*
                         :args args}))
    (println "Wrote" output-path)
    output-path))

(defmethod run-build :z5
  [format project sources output-dir options]
  (invoke-dialogc format project sources output-dir options))

(defmethod run-build :z8
  [format project sources output-dir options]
  (invoke-dialogc format project sources output-dir options))

(defmethod run-build :aa
  [format project sources output-dir options]
  (invoke-dialogc format project sources output-dir options))

(defmethod run-build :zblorb
  [format project sources output-dir options]
  (let [{:keys [cover cover-alt]} project
        extra-args (cond-> []
                     cover (conj "--cover" cover)
                     cover-alt (conj "--cover-alt" cover-alt))]
    (invoke-dialogc format project sources
                    output-dir
                    (assoc options :extra-args extra-args))))

(defn bundle
  [format project sources output-dir options]
  (let [aastory-file (run-build :aa project sources output-dir options)
        bundle-dir (str output-dir "/" (name format))
        args ["--target" (name format)
              "--output" bundle-dir
              aastory-file]]
    (when (os/exists? bundle-dir)
      (sh "rm" "-rf" bundle-dir))
    (check-result "Bundle"
                  (exec "aambundle"
                        {:stdout *out*
                         :stderr *err*
                         :args args}))
    (println "Wrote" bundle-dir)))

(defmethod run-build :web
  [format project sources output-dir options]
  (bundle format project sources output-dir options))

(defmethod run-build :c64
  [format project sources output-dir options]
  (bundle format project sources output-dir options))

(defn do-build
  [project options]
  (let [{:keys [default-output]} project
        {:keys [output-format release]} options
        output-dir (str "out/"
                        (if release "release" "test"))
        sources (extract-sources project release)]
    (mkdirs output-dir)
    (run-build (or output-format default-output) project sources output-dir options)))

(def allowed-formats #{:web :aa :zblorb :z8 :z5 :c64})

(def allowed-formats-str (->> allowed-formats (map name) sort (str/join ", ")))

(defcommand build
  "Builds a compiled version of the project

  Projects can be built for release, or for testing; the testing
  build includes :debug-sources, the release build does not."
  [_ debug-opt
   testing ["-t" "--testing" "Compile for testing, including debug sources"]
   verbose ["-v" "--verbose" "Enable additional compiler output"]
   :args
   format ["FORMAT" (str "Override default output format (" allowed-formats-str ")")
           :optional true
           :parse-fn keyword
           :validate [allowed-formats (str "Unrecognized format, must be one of: " allowed-formats-str)]]]
  (do-build (read-project-file)
            {:output-format format 
             :release (not testing)
             :verbose verbose}))

(defcommand clean
  "Cleans output"
  [cache ["-c" "--cache" "Clean cache as well"]
   _ debug-opt]
  (let [paths (cond-> ["out"]
                cache (conj ".cache"))]
    (check-result "Delete"
                  (apply sh "rm" "-rf"  paths))))

(defn find-test-paths
  []
  (concat (f/glob "tests/*.txt")
          (f/glob "tests/**/*.txt")))

(defn overrides-for-test
  [test-path]
  (let [[dir _] (f/split test-path)
        override-path (f/join dir "overrides.edn")]
    (when (os/exists? override-path)
      (-> override-path slurp read-string))))

(defn execute-test
  "Executes a single test; the test path is a file containing a transcript
  to feed into the game.
  
  Returns nil on success and a failure map on failure."
  [project test-name test-path]
  (let [overrides (overrides-for-test test-path)
        project' (merge project overrides)
        sources (extract-sources project' false)
        test-input (->> test-path
                        slurp
                        str/split-lines
                        (remove str/blank?)
                        ;; Allow Dialog-style comments in the source transcript
                        (remove #(str/starts-with? % "%%"))
                        (str/join \newline))
        seed (get project' :seed (hash test-path))
        args (into ["--quit"
                    "--width" "80" ;; Good for comparing test output
                    "-L"
                    "--seed" (str seed)]
                   sources)
        result (check-result "Test Execution"
                             (exec "dgdebug" {:args args
                                              :stdin test-input}))
        actual-output (:out result)
        blessed-path (str "tests/" test-name ".out")
        expected-output (when (os/exists? blessed-path)
                          (slurp blessed-path))
        passed? (= actual-output expected-output)]
    (when-not passed?
      (let [output-path (str "out/failed-tests/" test-name ".out")
            [output-dir _] (f/split output-path)]
        (mkdirs output-dir)
        (spit output-path actual-output)
        {:test-name test-name
         :output-path output-path
         :blessed-path blessed-path}))))

(defn overwrite-failures
  [failures]
  (doseq [{:keys [output-path blessed-path]} failures]
    (check-result "Move file" (sh "mv" "-f" output-path blessed-path))))

(defn bless-test
  "Show diff for test, ask user to bless

  If user approves, replace blessed file with output file, and return true.

  Otherwise, return false."
  [failure-map]
  (let [{:keys [test-name output-path blessed-path]} failure-map]
    ;; Its going to fail (with 1) because the files are not the same
    (exec "colordiff" {:args ["-N" "-y" "-W" "170"
                              "--left-column"
                              "--horizon-lines=30"
                              blessed-path output-path]
                          :stdout *out*
                          :stderr *err*})
    (println)
    (loop []
      (print (str "Bless " test-name " differences (" green-font "right column" reset-font ")? [yN] "))
      (let [input (read-line)]
        (cond
          (= input "y")
          (check-result "Move file" (sh "mv" "-f" output-path blessed-path))

          (or (= input "")
              (= input "n"))
          nil

          :else
          (do
            (println (str red-font "Enter 'y' or 'n' (or hit enter)" reset-font))
            (recur)))))))

(defn format-nanos
  [nanos]
  (format "%8.1f ms"
          (double (/ nanos 1e6))))

(defcommand run-tests
  "Runs tests, capturing output, summarizing failures, then ask to 'bless' changes"
  [force ["-f" "--force" "Identify failures, but overwrite .out files anyway"]
   _ debug-opt
   :args
   test-name ["NAME" "Limit tests to those that match this name"
              :optional true]
   :command-name "test"]
  (let [project (read-project-file)
        paths (find-test-paths)
        tests (cond->> (map (fn [path]
                              {:test-path path
                               :test-name (-> path
                                              (str/replace "tests/" "")
                                              (str/replace #"\.txt" ""))})
                            paths)
                test-name  (filter #(str/includes? (:test-name %) test-name))
                true (sort-by :test-name))
        _ (when (empty? tests)
            (fail "No tests match"))
        max-width (->> tests
                       (map :test-name)
                       (map count)
                       (apply max))
        f (fn [failures {:keys [test-name test-path]}]
            (print (str/pad-left test-name " " max-width) "... ")
            (let [start-time (t/now)
                  failure (execute-test project test-name test-path)
                  elapsed (format-nanos
                           (t/since start-time))]
              (if failure
                (do
                  (println (str red-font "X" reset-font) elapsed)
                  (conj failures failure))
                (do
                  (println (str green-font \u2713 reset-font) elapsed)
                  failures))))
        failures (reduce f [] tests)]
    (if (seq failures)
      (do
        (println (str "\n" red-font (count failures) " failures" reset-font))
        (if force
          (overwrite-failures failures)
          (run! bless-test failures)))
      (println (str "\n" green-font "OK" reset-font)))))

(defcommand debug
  "Runs the game in the Dialog debugger"
  [overrides-path ["-o" "--overrides PATH" "Path to overrides for dialog.edn"]
   seed ["-s" "--seed NUMBER" "Initialize random number generator"
         :parse-fn atoi]
   _ debug-opt]
  (let [project (read-project-file)
        overrides (when overrides-path
                    (-> overrides-path
                        slurp
                        read-string))
        project' (merge project overrides)
        seed' (or seed (:seed project'))
        sources (extract-sources project' false)
        args (-> (cond-> ["--quit"]
                   seed' (into ["--seed" (str seed')]))
                 (into sources))]
    (exec "dgdebug" {:args args
                     :stdin *in*
                     :stdout *out*
                     :stderr *err*})))

;; Main entry point.
(multi/dispatch {:tool-name "dgt"
                 :namespaces ['dgt]})